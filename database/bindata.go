// Code generated by go-bindata.
// sources:
// 001_create.down.sql
// 001_create.up.sql
// DO NOT EDIT!

package database

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __001_createDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x72\x75\xf7\xf4\xb3\xe6\xe5\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\x28\x4d\xca\xc9\x4c\xd6\xcb\x4d\x2d\x2e\x4e\x4c\x4f\x2d\xb6\xe6\xe5\x72\xf6\xf7\xf5\xf5\x0c\xb1\x06\x04\x00\x00\xff\xff\xbf\x16\x37\xd6\x2c\x00\x00\x00")

func _001_createDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_createDownSql,
		"001_create.down.sql",
	)
}

func _001_createDownSql() (*asset, error) {
	bytes, err := _001_createDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_create.down.sql", size: 44, mode: os.FileMode(438), modTime: time.Unix(1547203400, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __001_createUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x4f\x4b\xc3\x40\x10\xc5\xef\x0b\xfb\x1d\xde\x31\x05\x11\x2f\x9e\x82\x87\x6d\x9d\xe8\xe2\x66\xa3\x9b\x0d\xb5\xc7\x34\x5d\x6a\xa4\x89\x35\x1b\x85\x7e\x7b\xc9\x1f\x11\x8a\x60\xac\x9e\xdf\xcc\xe3\xfd\xde\xcc\x9c\x6e\xa4\x0e\x39\xe3\x6c\x61\x48\x58\x82\x15\x73\x45\x90\x11\x74\x62\x41\x8f\x32\xb5\x29\xf6\x6f\xeb\x5d\x59\x9c\x17\xbb\xd2\xd5\x2d\x67\x01\x67\x00\xca\x0d\x52\x32\x52\x28\xdc\x1b\x19\x0b\xb3\xc2\x1d\xad\xce\x7a\x69\x18\x94\x1b\x14\x4f\x79\x93\x17\xad\x6b\xf0\x9e\x37\x87\xb2\xde\x06\x97\x17\xb3\xde\x59\x67\x4a\x21\xd3\xf2\x21\xa3\x61\xa7\xce\x2b\xf7\xc3\x3c\x67\x33\xce\x96\xd2\xde\xa2\x4f\x90\xc8\xeb\x14\x57\x88\x84\x4a\xa9\x97\x42\xce\x84\xb2\x64\x46\x86\xa3\xd4\x40\xb2\xd4\x9d\x98\xa0\xac\x5e\xfd\x44\xe6\xf6\xb0\x77\x13\x88\x27\xa4\x1f\x69\x4f\x83\x18\x62\x9c\x86\x50\x39\xef\xf3\xad\xf3\xff\x78\x38\x43\x11\x19\xd2\x0b\x3a\xfa\x8d\xe0\xd3\x60\x36\xf8\x75\xb1\x7f\xef\xd5\x6d\x05\x5d\xa3\xa3\xcb\x08\x80\x67\xff\x52\xaf\xff\xf8\x0d\x5f\x65\x7c\x5b\x66\x12\xc7\xd2\x86\x9c\x7d\x04\x00\x00\xff\xff\xc1\x04\xcb\x84\x17\x03\x00\x00")

func _001_createUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_createUpSql,
		"001_create.up.sql",
	)
}

func _001_createUpSql() (*asset, error) {
	bytes, err := _001_createUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_create.up.sql", size: 791, mode: os.FileMode(438), modTime: time.Unix(1547540465, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"001_create.down.sql": _001_createDownSql,
	"001_create.up.sql":   _001_createUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"001_create.down.sql": &bintree{_001_createDownSql, map[string]*bintree{}},
	"001_create.up.sql":   &bintree{_001_createUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
